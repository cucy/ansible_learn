#!/usr/bin/env python
# _*_ coding:utf8 _*_ 

# 核心class
from collections import namedtuple

from ansible.executor.playbook_executor import PlaybookExecutor
from ansible.parsing.dataloader import DataLoader
from ansible.vars.manager import VariableManager
from ansible.inventory.manager import InventoryManager
from ansible.playbook.play import Play
from ansible.playbook import *
from ansible.executor.task_queue_manager import TaskQueueManager
from ansible.plugins.callback import CallbackBase

# InventoryManager
""" 管理主机，主机组相关资源信息 """

# 读取yaml文件信息
loader = DataLoader()

inventory = InventoryManager(loader=loader, sources=["my_hosts"])
"""
loader 怎样的方式读取配置文件
sources 列表形式读取信息， 相对路径，绝对路径    l
"""

# VariableManager 类
variable_manager = VariableManager(loader=loader, inventory=inventory)
"""
loader 传入loader对象,读取yaml资源配置文件
inventory 
"""

# Options 类
Options = namedtuple('Options',
                     ['connection', 'module_path', 'forks', 'become', 'become_method', 'become_user', 'check', 'diff',
                      "listhosts","listtasks","listtags", "syntax"])

options = Options(connection='smart', module_path=None, forks=10, become=None, become_method=None, become_user=None,
                  check=False, diff=False, listhosts=None,listtasks=None,listtags=None, syntax=None)



#  PlayBook CallbackBase 类
class PlayBookResultCollector(CallbackBase):
    """
      rewirte CallbackBase class
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.task_ok = {}
        self.task_unreachable = {}
        self.task_failed = {}
        self.task_status = {}
        self.task_skipped= {}

    def v2_runner_on_unreachable(self, result):
        self.task_unreachable[result._host.get_name()] = result

    def v2_runner_on_ok(self, result, *args, **kwargs):
        self.task_ok[result._host.get_name()] = result

    def v2_runner_on_failed(self, result, ignore_errors=False):
        self.task_failed[result._host.get_name()] = result

    def v2_runner_on_skipped(self, result):
        self.task_skipped [result._host.get_name()] = result
    def v2_playbook_on_stats(self, stats):
        hosts = sorted(stats.processed.keys())
        for h in hosts :
            t = stats.summarize(h)
            self.task_status[h]  = {
                "ok" : t["ok"],
                "unreachable":t["unreachable"],
                "skipped": t["skipped"] ,
                "failed"  : t["failures"]

            }

callback = PlayBookResultCollector()

#  PlaybookExecutor 类

passwords = dict()

play_book = PlaybookExecutor(
    playbooks=["fbook1.yaml"],

    inventory=inventory,
    variable_manager=variable_manager,
    loader=loader,
    options=options,
    passwords=passwords
)
play_book._tqm._stdout_callback = callback

play_book.run()


result_raw = {
    "ok": {},
    "skipped": {},
    "failed": {},

    "unreachable": {}}


for host, result in callback.task_ok.items():
    result_raw["ok"][host] = result._result


for host, result in callback.task_failed.items():
    result_raw["failed"][host] = result._result

for host, result in callback.task_skipped.items():
    result_raw["skipped"][host] = result._result

for host, result in callback.task_unreachable.items():
    result_raw["unreachable"][host] = result._result

print(result_raw)
